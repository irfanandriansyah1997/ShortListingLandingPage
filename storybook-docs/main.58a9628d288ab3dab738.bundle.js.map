{"version":3,"file":"main.58a9628d288ab3dab738.bundle.js","sources":["webpack:///./src/shared/components/atoms/text/text.component.tsx"],"sourcesContent":["/**\n * Icon Component\n * @author Ghazwan S. M. <ghazwan.sihamudin@gmail.com>\n * @author Irfan Andriansyah <irfan@99.co>\n * @since 2019.07.09\n */\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { convert_obj_to_string } from '@/shared/utils/string.utils';\nimport { PropsInterface } from './interfaces/component.interface';\n\nimport './style/style.scss';\n\nclass Text extends React.Component<PropsInterface> {\n    static propTypes = {\n        styling: PropTypes.oneOf(['heading', 'subheading', 'text', 'caption']),\n        tag: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'span']).isRequired,\n        fontWeight: PropTypes.oneOf([300, 400, 500, 600, 700]).isRequired,\n        children: PropTypes.oneOfType([\n            PropTypes.arrayOf(PropTypes.node),\n            PropTypes.node,\n            PropTypes.string\n        ]).isRequired,\n        align: PropTypes.oneOf(['center', 'left', 'right', 'initial']),\n        name: PropTypes.string\n    };\n\n    static defaultProps = {\n        styling: 'text',\n        align: 'initial',\n        name: ''\n    };\n\n    get className(): string {\n        const {\n            styling, fontWeight, align, name\n        } = this.props;\n        const FONT_WEIGHT = {\n            300: 'light',\n            400: 'normal',\n            500: 'medium',\n            600: 'semibold',\n            700: 'bold'\n        };\n\n        return convert_obj_to_string({\n            [`${name}`]: true,\n            'ui-atomic-text': true,\n            [`ui-atomic-text--style-${styling}`]: true,\n            [`ui-atomic-text--font-weight-${FONT_WEIGHT[fontWeight]}`]: true,\n            [`ui-atomic-text--align-${align}`]: true\n        });\n    }\n\n    render(): React.ReactNode {\n        const { children, tag } = this.props;\n        const { className } = this;\n\n        return React.createElement(tag, { className }, children);\n    }\n}\n\nexport default Text;\n"],"mappings":"AA+DA","sourceRoot":""}